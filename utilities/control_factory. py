import re
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QComboBox, QPushButton, QFileDialog, QToolTip

def parse_subsystems(file_content):
    # Updated parsing logic to also capture doc_str and check for Enums
    subsystems = re.findall(r"class (\w+)\(Subsystem\):", file_content)
    properties = re.findall(r"(\w+) = command_property\(\"(\w+).*?doc_str=\"(.*?)\"", file_content)
    enums = re.findall(r"(\w+) = command_options\('\w+', \[(.*?)\]\)", file_content)
    enum_dict = {name: options.split(", ") for name, options in enums}
    return subsystems, dict(properties), enum_dict

def generate_ui_code(subsystem_name, properties, enums):
    ui_code = f"""
from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QLineEdit, QComboBox, QPushButton

class {subsystem_name}Control(QWidget):
    def __init__(self, instrument, parent=None):
        super().__init__(parent)
        self.instrument = instrument
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
"""
    for prop_name, (cmd_str, doc_str) in properties.items():
        enum_options = enums.get(f"{prop_name.capitalize()}s")
        if enum_options:
            # Use QComboBox for properties with valid values
            options_str = ", ".join([f'"{option}"' for option in enum_options])
            ui_code += f"""
        self.{prop_name}_combobox = QComboBox()
        self.{prop_name}_combobox.addItems([{options_str}])
        self.{prop_name}_combobox.setToolTip("{doc_str}")
        self.{prop_name}_combobox.currentTextChanged.connect(self.update_{prop_name})
        layout.addWidget(QLabel("{prop_name.capitalize()}:"))
        layout.addWidget(self.{prop_name}_combobox)
"""
        else:
            # Use QLineEdit for properties without valid values
            ui_code += f"""
        self.{prop_name}_edit = QLineEdit()
        self.{prop_name}_edit.editingFinished.connect(self.update_{prop_name})
        self.{prop_name}_edit.setToolTip("{doc_str}")
        layout.addWidget(QLabel("{prop_name.capitalize()}:"))
        layout.addWidget(self.{prop_name}_edit)
"""

    for prop_name in properties.keys():
        ui_code += f"""
    def update_{prop_name}(self):
        value = getattr(self, '{prop_name}_{"combobox" if prop_name.capitalize()+"s" in enums else "edit"}').currentText() if "{prop_name.capitalize()}s" in enums else getattr(self, '{prop_name}_edit').text()
        self.instrument.{prop_name} = value  # Simplified; adjust for actual command execution
"""
    ui_code += f"""
    def sync(self):
        # Simplified sync method; to be implemented
        pass
"""
    return ui_code

def main(file_path):
    with open(file_path, 'r') as f:
        content = f.read()

    subsystems, properties, enums = parse_subsystems(content)
    for subsystem in subsystems:
        ui_code = generate_ui_code(subsystem, properties, enums)
        output_path = f"{file_path[:-3]}_{subsystem.lower()}_controls.py"
        with open(output_path, 'w') as f:
            f.write(ui_code)
        print(f"Generated: {output_path}")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    file_dialog = QFileDialog()
    file_path, _ = file_dialog.getOpenFileName(caption="Select Subsystems File")
    if file_path:
        main(file_path)